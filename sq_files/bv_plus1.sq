
data BitVec where
  Nil :: BitVec
  Cons :: x:  {Int | _v == 0 || _v == 1} -> xs: BitVec -> BitVec
  
termination measure len :: BitVec -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs   
  
measure value :: BitVec -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> x + 2 * (value xs)
  
    
neq :: x: a -> y: a -> {Bool | _v == (x != y)}
zero :: {Int | _v == 0}
one :: {Int | _v == 1}

plus :: x: BitVec -> y: {BitVec | len _v == len x} -> {BitVec | value _v == value x + value y}
plus =  ??
