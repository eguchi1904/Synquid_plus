data List a <p :: Int -> a -> Bool> where
  Nil :: List a <p>
  Cons :: x: {a | p 0 _v} -> xs: List a <{p (_0 + 1) _1}> -> List a <p>
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs

measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs  

data Pair a b where
 Pair :: x: a -> y: b -> Pair a b
  
measure fst :: Pair a b -> a where
  Pair x y -> x
  
measure snd :: Pair a b -> b where
  Pair x y -> y


data Option a where
  None :: Option a
  Some :: x:a -> Option a

measure opelem :: Option a -> Set a where
  None -> []
  Some x -> [x]

measure isNone :: Option a -> Bool where
  None -> True
  Some x -> False

qualifier {x == y}



zero :: {Int | _v == 0}
inc :: x: Int -> {Int | _v == x + 1}
dec :: x: Int -> {Int | _v == x - 1}

uncons ::  <p :: Int -> a -> Bool> . xs: List a <p> ->
    {Option (Pair {a|p 0 _v} {List a <{p (_0 +1) _1}>|len _v == len xs - 1}) | isNone _v == (len xs == 0) }
    
uncons = ??    
