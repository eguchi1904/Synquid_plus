data RList a <r :: a -> a -> Bool> where
  Nil :: RList a <r>
  Cons :: x: a -> xs: RList {a | r x _v} <r> -> RList a <r>
  
termination measure len :: RList a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

measure elems :: RList a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs  
  


leq :: x: a -> y: a -> {Bool | _v == (x <= y)}
neq :: x: a -> y: a -> {Bool | _v == (x != y)}
true::{Bool | _v == True}


g::<r :: a -> a -> Bool>. f:(x1:a -> x2:a -> {Bool| _v == (r x1 x2)}) ->
  x:a -> l:RList a <{r _0 _1}> ->  {RList a <{r _0 _1}> | (elems _v == elems l + [x]) && (len _v == len l + 1)}

sort ::<r :: a -> a -> Bool>. f:(x1:a -> x2:a -> {Bool| _v == (r x1 x2)}) ->
   l: RList a <{True}> -> {RList a <{r _1 _0}> | (elems _v == elems l) && (len _v == len l)}

sort = \f. \l.
match l with
  Nil -> Nil
  Cons x xs -> g (\x. \y. f y x) x (sort f xs)
     
       


