zero :: {Int | _v == 0}
inc :: x: Int -> {Int | _v == x + 1}

inline max x y = if x >= y then x else y
inline abs x = if x >= 0 then x else -x
inline eqOrOneLess x y = x <= y && y <= x + 1 

data AVL a where
  Leaf :: AVL a
  Node :: x: a 
            -> l: AVL {a | _v < x} 
            -> r: {AVL {a | _v > x} | abs (realHeight l - realHeight _v) <= 1} 
            -> h: {Int | _v == 1 + max (realHeight l) (realHeight r) } 
            -> AVL a
            
termination measure realHeight :: AVL a -> {Int | _v >= 0} where
  Leaf -> 0
  Node x l r h -> 1 + max (realHeight l) (realHeight r)
  
measure balFac :: AVL a -> Int where
  Leaf -> 0
  Node x l r h -> realHeight l - realHeight r
  
measure elems :: AVL a -> Set a where
  Leaf -> []
  Node x l r h -> [x] + elems l + elems r  

getHeight :: t: AVL a -> {Int | _v == realHeight t}
        
-- inline nodeHeightM l r = 1 + max (realHeight l) (realHeight r)
-- inline isReal v l r = (v == nodeHeightM l r)
-- inline isBal l r n = 0 - n <= realHeight l - realHeight r && realHeight l - realHeight r <= n

-- inline balHt l r t = (!(isBal l r 1) || isReal (realHeight t) l r)

-- inline bigHt l r t = eqOrOneLess (max (realHeight l) (realHeight r)) (realHeight t)

-- qualifier {x < y}                        

-- balance :: x: a
--          -> l: AVL {a | _v < x} 
--          -> r: {AVL {a | _v > x} | abs (realHeight l - realHeight _v) <= 2}
--          -> {AVL a | balHt l r _v && bigHt l r _v && elems _v == [x] + elems l + elems r}

insert :: y: a -> t: AVL a -> {AVL a | realHeight t <= realHeight _v && realHeight _v <= realHeight t + 1 &&
                                        elems _v == [y] + elems t}
insert = ??
